//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestProject.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ObjectId", Namespace="http://schemas.datacontract.org/2004/07/MongoDB.Bson")]
    [System.SerializableAttribute()]
    public partial struct ObjectId : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int _incrementField;
        
        private int _machineField;
        
        private short _pidField;
        
        private int _timestampField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _increment {
            get {
                return this._incrementField;
            }
            set {
                if ((this._incrementField.Equals(value) != true)) {
                    this._incrementField = value;
                    this.RaisePropertyChanged("_increment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _machine {
            get {
                return this._machineField;
            }
            set {
                if ((this._machineField.Equals(value) != true)) {
                    this._machineField = value;
                    this.RaisePropertyChanged("_machine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short _pid {
            get {
                return this._pidField;
            }
            set {
                if ((this._pidField.Equals(value) != true)) {
                    this._pidField = value;
                    this.RaisePropertyChanged("_pid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _timestamp {
            get {
                return this._timestampField;
            }
            set {
                if ((this._timestampField.Equals(value) != true)) {
                    this._timestampField = value;
                    this.RaisePropertyChanged("_timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMongoDbService")]
    public interface IMongoDbService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMongoDbService/GetDatabaseNames", ReplyAction="http://tempuri.org/IMongoDbService/GetDatabaseNamesResponse")]
        string[] GetDatabaseNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMongoDbService/GetDatabaseNames", ReplyAction="http://tempuri.org/IMongoDbService/GetDatabaseNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetDatabaseNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMongoDbService/GetCollectionNames", ReplyAction="http://tempuri.org/IMongoDbService/GetCollectionNamesResponse")]
        string[] GetCollectionNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMongoDbService/GetCollectionNames", ReplyAction="http://tempuri.org/IMongoDbService/GetCollectionNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetCollectionNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMongoDbService/FindOneById", ReplyAction="http://tempuri.org/IMongoDbService/FindOneByIdResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TestProject.ServiceReference1.ObjectId))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Func<object>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.MulticastDelegate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Delegate))]
        object FindOneById(string collectionName, TestProject.ServiceReference1.ObjectId id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMongoDbService/FindOneById", ReplyAction="http://tempuri.org/IMongoDbService/FindOneByIdResponse")]
        System.Threading.Tasks.Task<object> FindOneByIdAsync(string collectionName, TestProject.ServiceReference1.ObjectId id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMongoDbService/FindMany", ReplyAction="http://tempuri.org/IMongoDbService/FindManyResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TestProject.ServiceReference1.ObjectId))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Func<object>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.MulticastDelegate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Delegate))]
        object FindMany(string collectionName, System.Func<object> expression, object value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMongoDbService/FindMany", ReplyAction="http://tempuri.org/IMongoDbService/FindManyResponse")]
        System.Threading.Tasks.Task<object> FindManyAsync(string collectionName, System.Func<object> expression, object value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMongoDbService/Save", ReplyAction="http://tempuri.org/IMongoDbService/SaveResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TestProject.ServiceReference1.ObjectId))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Func<object>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.MulticastDelegate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Delegate))]
        bool Save(TestProject.ServiceReference1.ObjectId id, object item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMongoDbService/Save", ReplyAction="http://tempuri.org/IMongoDbService/SaveResponse")]
        System.Threading.Tasks.Task<bool> SaveAsync(TestProject.ServiceReference1.ObjectId id, object item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMongoDbService/Update", ReplyAction="http://tempuri.org/IMongoDbService/UpdateResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TestProject.ServiceReference1.ObjectId))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Func<object>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.MulticastDelegate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Delegate))]
        object Update(TestProject.ServiceReference1.ObjectId id, object newValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMongoDbService/Update", ReplyAction="http://tempuri.org/IMongoDbService/UpdateResponse")]
        System.Threading.Tasks.Task<object> UpdateAsync(TestProject.ServiceReference1.ObjectId id, object newValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMongoDbService/Insert", ReplyAction="http://tempuri.org/IMongoDbService/InsertResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(TestProject.ServiceReference1.ObjectId))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Func<object>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.MulticastDelegate))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Delegate))]
        TestProject.ServiceReference1.ObjectId Insert(object item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMongoDbService/Insert", ReplyAction="http://tempuri.org/IMongoDbService/InsertResponse")]
        System.Threading.Tasks.Task<TestProject.ServiceReference1.ObjectId> InsertAsync(object item);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMongoDbServiceChannel : TestProject.ServiceReference1.IMongoDbService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MongoDbServiceClient : System.ServiceModel.ClientBase<TestProject.ServiceReference1.IMongoDbService>, TestProject.ServiceReference1.IMongoDbService {
        
        public MongoDbServiceClient() {
        }
        
        public MongoDbServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MongoDbServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MongoDbServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MongoDbServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetDatabaseNames() {
            return base.Channel.GetDatabaseNames();
        }
        
        public System.Threading.Tasks.Task<string[]> GetDatabaseNamesAsync() {
            return base.Channel.GetDatabaseNamesAsync();
        }
        
        public string[] GetCollectionNames() {
            return base.Channel.GetCollectionNames();
        }
        
        public System.Threading.Tasks.Task<string[]> GetCollectionNamesAsync() {
            return base.Channel.GetCollectionNamesAsync();
        }
        
        public object FindOneById(string collectionName, TestProject.ServiceReference1.ObjectId id) {
            return base.Channel.FindOneById(collectionName, id);
        }
        
        public System.Threading.Tasks.Task<object> FindOneByIdAsync(string collectionName, TestProject.ServiceReference1.ObjectId id) {
            return base.Channel.FindOneByIdAsync(collectionName, id);
        }
        
        public object FindMany(string collectionName, System.Func<object> expression, object value) {
            return base.Channel.FindMany(collectionName, expression, value);
        }
        
        public System.Threading.Tasks.Task<object> FindManyAsync(string collectionName, System.Func<object> expression, object value) {
            return base.Channel.FindManyAsync(collectionName, expression, value);
        }
        
        public bool Save(TestProject.ServiceReference1.ObjectId id, object item) {
            return base.Channel.Save(id, item);
        }
        
        public System.Threading.Tasks.Task<bool> SaveAsync(TestProject.ServiceReference1.ObjectId id, object item) {
            return base.Channel.SaveAsync(id, item);
        }
        
        public object Update(TestProject.ServiceReference1.ObjectId id, object newValue) {
            return base.Channel.Update(id, newValue);
        }
        
        public System.Threading.Tasks.Task<object> UpdateAsync(TestProject.ServiceReference1.ObjectId id, object newValue) {
            return base.Channel.UpdateAsync(id, newValue);
        }
        
        public TestProject.ServiceReference1.ObjectId Insert(object item) {
            return base.Channel.Insert(item);
        }
        
        public System.Threading.Tasks.Task<TestProject.ServiceReference1.ObjectId> InsertAsync(object item) {
            return base.Channel.InsertAsync(item);
        }
    }
}
